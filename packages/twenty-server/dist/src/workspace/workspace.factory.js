"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceFactory = void 0;
const common_1 = require("@nestjs/common");
const graphql_1 = require("graphql");
const schema_1 = require("@graphql-tools/schema");
const graphql_tag_1 = require("graphql-tag");
const data_source_service_1 = require("../metadata/data-source/data-source.service");
const workspace_schema_storage_service_1 = require("./workspace-schema-storage/workspace-schema-storage.service");
const object_metadata_service_1 = require("../metadata/object-metadata/object-metadata.service");
const scalars_explorer_service_1 = require("./services/scalars-explorer.service");
const workspace_graphql_schema_factory_1 = require("./workspace-schema-builder/workspace-graphql-schema.factory");
const factories_1 = require("./workspace-resolver-builder/factories/factories");
const workspace_resolver_factory_1 = require("./workspace-resolver-builder/workspace-resolver.factory");
let WorkspaceFactory = class WorkspaceFactory {
    constructor(dataSourceService, objectMetadataService, scalarsExplorerService, workspaceGraphQLSchemaFactory, workspaceResolverFactory, workspaceSchemaStorageService) {
        this.dataSourceService = dataSourceService;
        this.objectMetadataService = objectMetadataService;
        this.scalarsExplorerService = scalarsExplorerService;
        this.workspaceGraphQLSchemaFactory = workspaceGraphQLSchemaFactory;
        this.workspaceResolverFactory = workspaceResolverFactory;
        this.workspaceSchemaStorageService = workspaceSchemaStorageService;
    }
    async createGraphQLSchema(workspaceId) {
        if (!workspaceId) {
            return new graphql_1.GraphQLSchema({});
        }
        const dataSourcesMetadata = await this.dataSourceService.getDataSourcesMetadataFromWorkspaceId(workspaceId);
        if (!dataSourcesMetadata || dataSourcesMetadata.length === 0) {
            return new graphql_1.GraphQLSchema({});
        }
        await this.workspaceSchemaStorageService.validateCacheVersion(workspaceId);
        let objectMetadataCollection = await this.workspaceSchemaStorageService.getObjectMetadata(workspaceId);
        if (!objectMetadataCollection) {
            objectMetadataCollection =
                await this.objectMetadataService.findManyWithinWorkspace(workspaceId);
            await this.workspaceSchemaStorageService.setObjectMetadata(workspaceId, objectMetadataCollection);
        }
        let typeDefs = await this.workspaceSchemaStorageService.getTypeDefs(workspaceId);
        let usedScalarNames = await this.workspaceSchemaStorageService.getUsedScalarNames(workspaceId);
        if (!typeDefs || !usedScalarNames) {
            const autoGeneratedSchema = await this.workspaceGraphQLSchemaFactory.create(objectMetadataCollection, factories_1.workspaceResolverBuilderMethodNames);
            usedScalarNames =
                this.scalarsExplorerService.getUsedScalarNames(autoGeneratedSchema);
            typeDefs = (0, graphql_1.printSchema)(autoGeneratedSchema);
            await this.workspaceSchemaStorageService.setTypeDefs(workspaceId, typeDefs);
            await this.workspaceSchemaStorageService.setUsedScalarNames(workspaceId, usedScalarNames);
        }
        const autoGeneratedResolvers = await this.workspaceResolverFactory.create(workspaceId, objectMetadataCollection, factories_1.workspaceResolverBuilderMethodNames);
        const scalarsResolvers = this.scalarsExplorerService.getScalarResolvers(usedScalarNames);
        const executableSchema = (0, schema_1.makeExecutableSchema)({
            typeDefs: (0, graphql_tag_1.gql) `
        ${typeDefs}
      `,
            resolvers: Object.assign(Object.assign({}, scalarsResolvers), autoGeneratedResolvers),
        });
        return executableSchema;
    }
};
exports.WorkspaceFactory = WorkspaceFactory;
exports.WorkspaceFactory = WorkspaceFactory = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [data_source_service_1.DataSourceService,
        object_metadata_service_1.ObjectMetadataService,
        scalars_explorer_service_1.ScalarsExplorerService,
        workspace_graphql_schema_factory_1.WorkspaceGraphQLSchemaFactory,
        workspace_resolver_factory_1.WorkspaceResolverFactory,
        workspace_schema_storage_service_1.WorkspaceSchemaStorageService])
], WorkspaceFactory);
//# sourceMappingURL=workspace.factory.js.map